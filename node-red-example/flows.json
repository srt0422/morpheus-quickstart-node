[{"id":"22ea9a45226fc29f","type":"tab","label":"Morpheus Deployment Flow","disabled":false,"info":"Flow to deploy NFA components"},{"id":"d994e16b9210c8bc","type":"tab","label":"Manual GCP Trigger Flow","disabled":false,"info":"Flow to manually trigger Morpheus deployment"},{"id":"deploy-proxy-flow","type":"tab","label":"Deploy Proxy Flow","disabled":false,"info":"Flow to deploy proxy component independently"},{"id":"45387653d869bcb5","type":"tab","label":"HTTP Trigger Flow","disabled":false,"info":"Flow to trigger Morpheus deployment via HTTP"},{"id":"fae82b89774cd11b","type":"tab","label":"Health Check","disabled":false,"info":"Flow to deploy NFA components"},{"id":"cb37b3dbdb3d710c","type":"tab","label":"Template - Health Check","disabled":false,"locked":true,"info":"Flow to deploy NFA components","env":[]},{"id":"run-local-flow","type":"tab","label":"Run Local","disabled":false,"info":"Flow to run all services locally for end-to-end testing"},{"id":"52e21014b0e00e05","type":"deploy-config","z":"22ea9a45226fc29f","name":"Deployment Config"},{"id":"738ec5c630dd28b7","type":"function","z":"22ea9a45226fc29f","name":"Prepare Deployment","func":"// Initialize deployment message\nlet deployMsg = {\n    payload: msg.payload || {},\n    deploymentId: msg._msgid,\n    timestamp: new Date().toISOString()\n};\n\n// Add any additional configuration from the incoming message\nif (msg.config) {\n    deployMsg.config = msg.config;\n}\n\nreturn deployMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":140,"y":260,"wires":[["52e21014b0e00e05","88f5e702fc3d22ef","6a8382068e721486"]]},{"id":"6a8382068e721486","type":"debug","z":"22ea9a45226fc29f","name":"Start Debug","active":true,"tosidebar":true,"console":true,"complete":"true","targetType":"full","x":140,"y":360,"wires":[]},{"id":"88f5e702fc3d22ef","type":"deploy-proxy","z":"22ea9a45226fc29f","name":"Deploy Morpheus App Server","projectId":"test-quickstart-node","region":"us-west1","dockerRegistry":"srt0422","proxyVersion":"v0.0.31","internalApiPort":"8080","marketplacePort":"3333","marketplaceBaseUrl":"http://consumer-service","marketplaceUrl":"http://consumer-service/v1/chat/completions","sessionDuration":"1h","consumerUsername":"proxy","consumerPassword":"yosz9BZCuu7Rli7mYe4G1JbIO0Yprvwl","consumerNodeUrl":"http://consumer-service","x":190,"y":100,"wires":[["5275c4abd90e9899","proxy_to_consumer"]]},{"id":"5275c4abd90e9899","type":"debug","z":"22ea9a45226fc29f","name":"Proxy Debug","active":true,"tosidebar":true,"console":true,"complete":"true","targetType":"full","x":200,"y":180,"wires":[]},{"id":"0d720e7799f11ed8","type":"debug","z":"22ea9a45226fc29f","name":"Consumer Debug","active":true,"tosidebar":true,"console":true,"complete":"true","targetType":"full","x":610,"y":160,"wires":[]},{"id":"b0869f823124b0ca","type":"deploy-proxy","z":"22ea9a45226fc29f","name":"Update Proxy Config","projectId":"test-quickstart-node","region":"us-west1","dockerRegistry":"srt0422","proxyVersion":"v0.0.31","internalApiPort":"8080","marketplacePort":"3333","marketplaceBaseUrl":"http://consumer-service","marketplaceUrl":"http://consumer-service/v1/chat/completions","sessionDuration":"1h","consumerUsername":"proxy","consumerPassword":"yosz9BZCuu7Rli7mYe4G1JbIO0Yprvwl","consumerNodeUrl":"http://consumer-service","x":580,"y":220,"wires":[["5c636977909f2364","04e1902dbbaef398"]]},{"id":"04e1902dbbaef398","type":"debug","z":"22ea9a45226fc29f","name":"Update Proxy Debug","active":true,"tosidebar":true,"console":true,"complete":"true","targetType":"full","x":580,"y":280,"wires":[]},{"id":"5c636977909f2364","type":"deploy-webapp","z":"22ea9a45226fc29f","name":"Deploy Web App","x":970,"y":100,"wires":[["07c51ad503da3390","edbb5f6df0ba14cb"]]},{"id":"07c51ad503da3390","type":"debug","z":"22ea9a45226fc29f","name":"Deployment Results","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":980,"y":220,"wires":[]},{"id":"26e2f5a714795d6e","type":"comment","z":"22ea9a45226fc29f","name":"Universal Builders Kit","info":"","x":140,"y":40,"wires":[]},{"id":"94ef2cb636e5cdd5","type":"link in","z":"22ea9a45226fc29f","name":"Deployment Entry","links":["c6bebeadea571c5d","dfc5153d7e681fc2"],"x":40,"y":260,"wires":[["738ec5c630dd28b7"]]},{"id":"edbb5f6df0ba14cb","type":"function","z":"22ea9a45226fc29f","name":"Format Deployment Result","func":"return {\n    payload: {\n        status: 'success',\n        proxyUrl: msg.proxyUrl,\n        consumerUrl: msg.consumerUrl,\n        webappUrl: msg.webappUrl,\n        timestamp: new Date().toISOString()\n    }\n};","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1000,"y":160,"wires":[["d4ee9573dd1a89d0","07c51ad503da3390"]]},{"id":"d4ee9573dd1a89d0","type":"link out","z":"22ea9a45226fc29f","name":"Deployment Complete","links":["04ef4e8209c381ac"],"x":1225,"y":160,"wires":[]},{"id":"e2358669242add98","type":"deploy-consumer","z":"22ea9a45226fc29f","name":"Deploy Morpheus Node","projectId":"test-quickstart-node","region":"us-west1","dockerRegistry":"srt0422","consumerVersion":"v0.0.19","consumerUsername":"admin","consumerPassword":"yosz9BZCuu7Rli7mYe4G1JbIO0Yprvwl","useCookieSecret":"true","cookieSecretName":"COOKIE_SECRET","walletKey":"ede8aaf755183ababb0e1f4b754ae8efe5e39a56a8208e9ebfbb97e7dc9abe35","contractAddress":"0xb8C55cD613af947E73E262F0d3C54b7211Af16CF","morTokenAddress":"0x34a285a1b1c166420df5b6630132542923b5b27e","blockchainWsUrl":"","blockchainHttpUrl":"https://sepolia-rollup.arbitrum.io/rpc","explorerApiUrl":"https://api-sepolia.arbiscan.io/api","ethNodeChainId":"421614","ethNodeLegacyTx":"false","ethNodeUseSubscriptions":"false","proxyAddress":"0.0.0.0:3333","webAddress":"0.0.0.0:8082","webPublicUrl":"","environment":"development","proxyStoreChatContext":"true","proxyStoragePath":"./data/","logLevel":"info","logFormat":"text","logColor":"true","providerCacheTtl":"60","maxConcurrentSessions":"100","sessionTimeout":"3600","x":610,"y":100,"wires":[["0d720e7799f11ed8","b0869f823124b0ca"]]},{"id":"proxy_to_consumer","type":"function","z":"22ea9a45226fc29f","name":"Prepare Consumer Config","func":"// Ensure config is initialized\nmsg.config = msg.config || {};\n\n// Add proxyUrl to the config for deploy-consumer\nif (msg.payload && msg.payload.proxyUrl) {\n    msg.config.proxyUrl = msg.payload.proxyUrl;\n} else if (msg.proxyUrl) {\n    msg.config.proxyUrl = msg.proxyUrl;\n}\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":40,"wires":[["e2358669242add98"]]},{"id":"a134d8a063a6110b","type":"inject","z":"d994e16b9210c8bc","name":"Trigger GCP Deployment","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{}","payloadType":"json","x":160,"y":100,"wires":[["c6bebeadea571c5d"]]},{"id":"c6bebeadea571c5d","type":"link out","z":"d994e16b9210c8bc","name":"To Deployment","mode":"link","links":["94ef2cb636e5cdd5"],"x":340,"y":100,"wires":[]},{"id":"471c42b41ed6a7fb","type":"inject","z":"d994e16b9210c8bc","name":"Trigger GCP Proxy Deployment","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{}","payloadType":"json","x":170,"y":180,"wires":[["d88af84a2786ebb5"]]},{"id":"d88af84a2786ebb5","type":"link out","z":"d994e16b9210c8bc","name":"link out 1","mode":"link","links":["b23c1d170150e87f"],"x":375,"y":180,"wires":[]},{"id":"prepare-deployment","type":"function","z":"deploy-proxy-flow","name":"Prepare Deployment","func":"// Initialize deployment message\nlet deployMsg = {\n    payload: msg.payload || {},\n    deploymentId: msg._msgid,\n    timestamp: new Date().toISOString()\n};\n\n// Add any additional configuration from the incoming message\nif (msg.config) {\n    deployMsg.config = msg.config;\n}\n\nreturn deployMsg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":220,"y":60,"wires":[["deploy-proxy-node"]]},{"id":"deploy-proxy-node","type":"deploy-proxy","z":"deploy-proxy-flow","name":"Deploy Proxy","projectId":"test-quickstart-node","region":"us-west1","dockerRegistry":"srt0422","proxyVersion":"v0.0.31","internalApiPort":"8080","marketplacePort":"3333","marketplaceBaseUrl":"https://consumer-node","marketplaceUrl":"https://consumer-node","sessionDuration":"1h","consumerUsername":"proxy","consumerPassword":"yosz9BZCuu7Rli7mYe4G1JbIO0Yprvwl","consumerNodeUrl":"https://consumer-node","x":430,"y":60,"wires":[["deploy-proxy-debug","e851b867b9ff4d07"]]},{"id":"deploy-proxy-debug","type":"debug","z":"deploy-proxy-flow","name":"Deployment Result","active":true,"tosidebar":true,"console":true,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":660,"y":60,"wires":[]},{"id":"b23c1d170150e87f","type":"link in","z":"deploy-proxy-flow","name":"Deployment Entry","links":["dfc5153d7e681fc2","d88af84a2786ebb5"],"x":55,"y":60,"wires":[["prepare-deployment"]]},{"id":"eff360fa658cf2a9","type":"link out","z":"deploy-proxy-flow","name":"Deployment Complete","links":["04ef4e8209c381ac"],"x":845,"y":120,"wires":[]},{"id":"e851b867b9ff4d07","type":"function","z":"deploy-proxy-flow","name":"Format Deployment Result","func":"return {\n    payload: {\n        status: 'success',\n        proxyUrl: msg.proxyUrl,\n        consumerUrl: msg.consumerUrl,\n        webappUrl: msg.webappUrl,\n        timestamp: new Date().toISOString()\n    }\n};","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":680,"y":120,"wires":[["eff360fa658cf2a9"]]},{"id":"cc9d096f2441e848","type":"http in","z":"45387653d869bcb5","name":"Deploy Endpoint","url":"/deploy","method":"post","upload":false,"swaggerDoc":"","x":120,"y":80,"wires":[["25f5a509d6a9c2f6"]]},{"id":"25f5a509d6a9c2f6","type":"function","z":"45387653d869bcb5","name":"Validate Request","func":"if (!msg.payload) {\n    msg.statusCode = 400;\n    msg.payload = { error: 'Invalid request body' };\n    return [null, msg];\n}\n\nreturn [msg, null];","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":80,"wires":[["dfc5153d7e681fc2"],["301eacfa2ce2c6ed"]]},{"id":"dfc5153d7e681fc2","type":"link out","z":"45387653d869bcb5","name":"To Deployment","links":["94ef2cb636e5cdd5","e02e2557769541ed","b23c1d170150e87f"],"x":520,"y":80,"wires":[]},{"id":"301eacfa2ce2c6ed","type":"http response","z":"45387653d869bcb5","name":"Error Response","statusCode":"","headers":"","x":520,"y":140,"wires":[]},{"id":"4ee52ce93f53f3ce","type":"http response","z":"45387653d869bcb5","name":"Success Response","statusCode":"200","headers":"","x":920,"y":80,"wires":[]},{"id":"04ef4e8209c381ac","type":"link in","z":"45387653d869bcb5","name":"From Deployment","links":["edbb5f6df0ba14cb","e83ba8ea6b5f2bef","eff360fa658cf2a9"],"x":720,"y":80,"wires":[["4ee52ce93f53f3ce"]]},{"id":"2b27efa7ccbbbafb","type":"http in","z":"fae82b89774cd11b","name":"Health Check","url":"/health","method":"get","upload":false,"swaggerDoc":"","x":120,"y":80,"wires":[["976fa3e1f6251822"]]},{"id":"976fa3e1f6251822","type":"http response","z":"fae82b89774cd11b","name":"OK Response","statusCode":"200","headers":"","x":320,"y":80,"wires":[]},{"id":"453c9e75488ddc01","type":"http in","z":"cb37b3dbdb3d710c","name":"Health Check","url":"/health","method":"get","upload":false,"swaggerDoc":"","x":120,"y":80,"wires":[["cde29adb5a131b3e"]]},{"id":"cde29adb5a131b3e","type":"http response","z":"cb37b3dbdb3d710c","name":"OK Response","statusCode":"200","headers":"","x":320,"y":80,"wires":[]},{"id":"local-trigger","type":"inject","z":"run-local-flow","name":"Start Local Services","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"mode\":\"local\"}","payloadType":"json","x":150,"y":100,"wires":[["local-config"]]},{"id":"local-config","type":"function","z":"run-local-flow","name":"Local Configuration","func":"// Local development configuration\nlet localConfig = {\n    // Common settings\n    DOCKER_REGISTRY: \"srt0422\",\n    \n    // Proxy settings\n    PROXY_VERSION: \"v0.0.31\",\n    PROXY_PORT: 8080,\n    PROXY_MARKETPLACE_PORT: 3333,\n    \n    // Consumer settings\n    CONSUMER_VERSION: \"v0.0.19\",\n    CONSUMER_USERNAME: \"admin\",\n    CONSUMER_PASSWORD: \"localpassword\",\n    CONSUMER_PORT: 8082,\n    WALLET_PRIVATE_KEY: \"ede8aaf755183ababb0e1f4b754ae8efe5e39a56a8208e9ebfbb97e7dc9abe35\",\n    DIAMOND_CONTRACT_ADDRESS: \"0xb8C55cD613af947E73E262F0d3C54b7211Af16CF\",\n    MOR_TOKEN_ADDRESS: \"0x34a285a1b1c166420df5b6630132542923b5b27e\",\n    BLOCKCHAIN_HTTP_URL: \"https://sepolia-rollup.arbitrum.io/rpc\",\n    EXPLORER_API_URL: \"https://api-sepolia.arbiscan.io/api\",\n    ETH_NODE_CHAIN_ID: \"421614\",\n    ENVIRONMENT: \"development\",\n    \n    // Web app settings\n    WEBAPP_PORT: 3000,\n    MODEL_NAME: \"LMR-Hermes-2-Theta-Llama-3-8B\"\n};\n\n// Set the local URLs for services\nlocalConfig.PROXY_URL = `http://localhost:${localConfig.PROXY_PORT}`;\nlocalConfig.CONSUMER_URL = `http://localhost:${localConfig.CONSUMER_PORT}`;\nlocalConfig.WEBAPP_URL = `http://localhost:${localConfig.WEBAPP_PORT}`;\n\n// Setup marketplace URLs\nlocalConfig.MARKETPLACE_BASE_URL = localConfig.CONSUMER_URL;\nlocalConfig.MARKETPLACE_URL = `${localConfig.CONSUMER_URL}/v1/chat/completions`;\n\n// Add all config to msg\nmsg.localConfig = localConfig;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":100,"wires":[["local-proxy-debug","local-deploy-proxy"]]},{"id":"local-deploy-proxy","type":"exec","z":"run-local-flow","command":"docker run -d --name local-proxy \\\\n  -p {{localConfig.PROXY_PORT}}:8080 \\\\n  -p {{localConfig.PROXY_MARKETPLACE_PORT}}:3333 \\\\n  -e INTERNAL_API_PORT=8080 \\\\n  -e MARKETPLACE_PORT=3333 \\\\n  -e MARKETPLACE_BASE_URL={{localConfig.MARKETPLACE_BASE_URL}} \\\\n  -e MARKETPLACE_URL={{localConfig.MARKETPLACE_URL}} \\\\n  -e CONSUMER_USERNAME={{localConfig.CONSUMER_USERNAME}} \\\\n  -e CONSUMER_PASSWORD={{localConfig.CONSUMER_PASSWORD}} \\\\n  -e CONSUMER_NODE_URL={{localConfig.CONSUMER_URL}} \\\\n  -e SESSION_DURATION=1h \\\\n  {{localConfig.DOCKER_REGISTRY}}/openai-morpheus-proxy:{{localConfig.PROXY_VERSION}}","addpay":false,"append":"","useSpawn":"true","timer":"","winHide":false,"oldrc":false,"name":"Start Proxy Container","x":570,"y":100,"wires":[["local-proxy-result"],[],["local-proxy-error"]]},{"id":"local-proxy-debug","type":"debug","z":"run-local-flow","name":"Local Config","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"localConfig","targetType":"msg","statusVal":"","statusType":"auto","x":330,"y":180,"wires":[]},{"id":"local-proxy-result","type":"function","z":"run-local-flow","name":"Process Proxy Result","func":"// Add the proxy container ID to local config\nmsg.localConfig.PROXY_CONTAINER_ID = msg.payload.trim();\n\n// Set the proxy URL for subsequent steps\nmsg.proxyUrl = msg.localConfig.PROXY_URL;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":100,"wires":[["local-deploy-consumer","local-proxy-debug-result"]]},{"id":"local-proxy-debug-result","type":"debug","z":"run-local-flow","name":"Proxy Result","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":760,"y":180,"wires":[]},{"id":"local-deploy-consumer","type":"exec","z":"run-local-flow","command":"# Create .cookie file with credentials\necho \"{{localConfig.CONSUMER_USERNAME}}:{{localConfig.CONSUMER_PASSWORD}}\" > /tmp/local-cookie\n\ndocker run -d --name local-consumer \\\\n  -p {{localConfig.CONSUMER_PORT}}:8082 \\\\n  -v /tmp/local-cookie:/secrets/.cookie \\\\n  -e PROXY_ADDRESS=0.0.0.0:3333 \\\\n  -e WEB_ADDRESS=0.0.0.0:8082 \\\\n  -e WEB_PUBLIC_URL={{localConfig.CONSUMER_URL}} \\\\n  -e WALLET_PRIVATE_KEY={{localConfig.WALLET_PRIVATE_KEY}} \\\\n  -e DIAMOND_CONTRACT_ADDRESS={{localConfig.DIAMOND_CONTRACT_ADDRESS}} \\\\n  -e MOR_TOKEN_ADDRESS={{localConfig.MOR_TOKEN_ADDRESS}} \\\\n  -e EXPLORER_API_URL={{localConfig.EXPLORER_API_URL}} \\\\n  -e ETH_NODE_CHAIN_ID={{localConfig.ETH_NODE_CHAIN_ID}} \\\\n  -e ENVIRONMENT={{localConfig.ENVIRONMENT}} \\\\n  -e ETH_NODE_USE_SUBSCRIPTIONS=false \\\\n  -e ETH_NODE_LEGACY_TX=false \\\\n  -e PROXY_STORE_CHAT_CONTEXT=true \\\\n  -e PROXY_STORAGE_PATH=./data/ \\\\n  -e LOG_COLOR=true \\\\n  -e LOG_LEVEL=info \\\\n  -e LOG_FORMAT=text \\\\n  -e PROVIDER_CACHE_TTL=60 \\\\n  -e MAX_CONCURRENT_SESSIONS=100 \\\\n  -e SESSION_TIMEOUT=3600 \\\\n  -e CONSUMER_USERNAME={{localConfig.CONSUMER_USERNAME}} \\\\n  -e CONSUMER_PASSWORD={{localConfig.CONSUMER_PASSWORD}} \\\\n  -e BLOCKCHAIN_HTTP_URL={{localConfig.BLOCKCHAIN_HTTP_URL}} \\\\n  -e BLOCKSCOUT_API_URL={{localConfig.EXPLORER_API_URL}} \\\\n  -e COOKIE_FILE_PATH=/secrets/.cookie \\\\n  -e GO_ENV=development \\\\n  {{localConfig.DOCKER_REGISTRY}}/morpheus-marketplace-consumer:{{localConfig.CONSUMER_VERSION}}","addpay":false,"append":"","useSpawn":"true","timer":"","winHide":false,"oldrc":false,"name":"Start Consumer Container","x":1040,"y":100,"wires":[["local-consumer-result"],[],["local-consumer-error"]]},{"id":"local-consumer-result","type":"function","z":"run-local-flow","name":"Process Consumer Result","func":"// Add the consumer container ID to local config\nmsg.localConfig.CONSUMER_CONTAINER_ID = msg.payload.trim();\n\n// Wait a moment for consumer to start before deploying webapp\n// Set the consumer URL for subsequent steps\nmsg.consumerUrl = msg.localConfig.CONSUMER_URL;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1260,"y":100,"wires":[["local-wait-for-services"]]},{"id":"local-wait-for-services","type":"delay","z":"run-local-flow","name":"Wait for services to start","pauseType":"delay","timeout":"3","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":1460,"y":100,"wires":[["local-deploy-webapp"]]},{"id":"local-deploy-webapp","type":"exec","z":"run-local-flow","command":"docker run -d --name local-webapp \\\\n  -p {{localConfig.WEBAPP_PORT}}:3000 \\\\n  -e OPENAI_API_URL={{localConfig.PROXY_URL}}/v1 \\\\n  -e CHAT_COMPLETIONS_PATH=chat/completions \\\\n  -e NEXT_PUBLIC_CHAT_COMPLETIONS_PATH=chat/completions \\\\n  -e MODEL_NAME={{localConfig.MODEL_NAME}} \\\\n  {{localConfig.DOCKER_REGISTRY}}/chat-web-app:latest","addpay":false,"append":"","useSpawn":"true","timer":"","winHide":false,"oldrc":false,"name":"Start Webapp Container","x":1680,"y":100,"wires":[["local-webapp-result"],[],["local-webapp-error"]]},{"id":"local-webapp-result","type":"function","z":"run-local-flow","name":"Process Webapp Result","func":"// Add the webapp container ID to local config\nmsg.localConfig.WEBAPP_CONTAINER_ID = msg.payload.trim();\n\n// Set the web app URL for subsequent steps\nmsg.webappUrl = msg.localConfig.WEBAPP_URL;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1880,"y":100,"wires":[["local-deployment-complete"]]},{"id":"local-deployment-complete","type":"function","z":"run-local-flow","name":"Deployment Summary","func":"// Generate a deployment summary for the user\nreturn {\n    payload: {\n        status: 'success',\n        proxyUrl: msg.localConfig.PROXY_URL,\n        consumerUrl: msg.localConfig.CONSUMER_URL,\n        webappUrl: msg.localConfig.WEBAPP_URL,\n        timestamp: new Date().toISOString()\n    }\n};","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":2120,"y":100,"wires":[["local-summary-output"]]},{"id":"local-summary-output","type":"debug","z":"run-local-flow","name":"Local Deployment Results","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":2340,"y":100,"wires":[]},{"id":"local-proxy-error","type":"function","z":"run-local-flow","name":"Handle Proxy Error","func":"// Check if the error is because the container already exists\nif(msg.payload.includes(\"Conflict. The container name \")) {\n    // Container already exists, continue with consumer deployment\n    msg.localConfig.proxyAlreadyRunning = true;\n    return msg;\n} else {\n    // Log actual error\n    node.error(\"Proxy deployment failed: \" + msg.payload);\n    return null;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":40,"wires":[["local-deploy-consumer"]]},{"id":"local-consumer-error","type":"function","z":"run-local-flow","name":"Handle Consumer Error","func":"// Check if the error is because the container already exists\nif(msg.payload.includes(\"Conflict. The container name \")) {\n    // Container already exists, continue with webapp deployment\n    msg.localConfig.consumerAlreadyRunning = true;\n    return msg;\n} else {\n    // Log actual error\n    node.error(\"Consumer deployment failed: \" + msg.payload);\n    return null;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1260,"y":40,"wires":[["local-wait-for-services"]]},{"id":"local-webapp-error","type":"function","z":"run-local-flow","name":"Handle Webapp Error","func":"// Check if the error is because the container already exists\nif(msg.payload.includes(\"Conflict. The container name \")) {\n    // Container already exists, continue to summary\n    msg.localConfig.webappAlreadyRunning = true;\n    return msg;\n} else {\n    // Log actual error\n    node.error(\"Webapp deployment failed: \" + msg.payload);\n    return null;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":1880,"y":40,"wires":[["local-deployment-complete"]]},{"id":"stop-local-trigger","type":"inject","z":"run-local-flow","name":"Stop Local Services","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"mode\":\"stop\"}","payloadType":"json","x":150,"y":300,"wires":[["stop-services"]]},{"id":"stop-services","type":"exec","z":"run-local-flow","command":"docker stop local-proxy local-consumer local-webapp 2>/dev/null || true\ndocker rm local-proxy local-consumer local-webapp 2>/dev/null || true\nrm /tmp/local-cookie 2>/dev/null || true\necho \"All local containers stopped and removed.\"","addpay":false,"append":"","useSpawn":"true","timer":"","winHide":false,"oldrc":false,"name":"Stop and Remove Containers","x":390,"y":300,"wires":[["stop-result"],[],["stop-error"]]},{"id":"stop-result","type":"debug","z":"run-local-flow","name":"Stop Result","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":600,"y":300,"wires":[]},{"id":"stop-error","type":"debug","z":"run-local-flow","name":"Stop Error","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":600,"y":360,"wires":[]},{"id":"check-status-trigger","type":"inject","z":"run-local-flow","name":"Check Status","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"mode\":\"check\"}","payloadType":"json","x":140,"y":400,"wires":[["check-status"]]},{"id":"check-status","type":"exec","z":"run-local-flow","command":"echo \"== Local Services Status ==\"\necho \"Proxy:    $(docker ps -a --filter name=local-proxy --format '{{.Status}}' || echo 'Not found')\"\necho \"Consumer: $(docker ps -a --filter name=local-consumer --format '{{.Status}}' || echo 'Not found')\"\necho \"WebApp:   $(docker ps -a --filter name=local-webapp --format '{{.Status}}' || echo 'Not found')\"","addpay":false,"append":"","useSpawn":"false","timer":"","winHide":false,"oldrc":false,"name":"Check Container Status","x":370,"y":400,"wires":[["check-status-result"],[],["check-status-error"]]},{"id":"check-status-result","type":"debug","z":"run-local-flow","name":"Status Result","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":610,"y":400,"wires":[]},{"id":"check-status-error","type":"debug","z":"run-local-flow","name":"Status Error","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":610,"y":460,"wires":[]}]